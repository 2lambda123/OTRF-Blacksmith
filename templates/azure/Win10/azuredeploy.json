{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "utcValue": {
            "type": "string",
            "defaultValue": "[utcNow()]",
            "metadata": {
                "description": "Returns the current (UTC) datetime value in the specified format. If no format is provided, the ISO 8601 (yyyyMMddTHHmmssZ) format is used"
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for the Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the Virtual Machine."
            }
        },
        "vmNamePrefix": {
            "type": "string",
            "defaultValue": "WORKSTATION",
            "metadata": {
                "description": "Prefix for the name of your virtual machine. Template will add a number starting from 5."
            }
        },
        "numberOfWorkstations": {
            "type": "int",
            "defaultValue": 1,
            "minValue": 1,
            "maxValue": 100,
            "metadata": {
                "description": "Number of VMs to deploy"
            }
        },
        "windowsDesktopSKU": {
            "type": "string",
            "defaultValue": "19h2-pro",
            "allowedValues": [
                "19h1-pro",
                "19h2-pro",
                "rs4-pro",
                "rs5-pro",
                "20h1-pro"
            ],
            "metadata": {
                "description": "The Windows version for the Desktop VM. This will pick a fully patched image of this given Windows version."
            }
        },
        "windowsDesktopVersion": {
            "type": "string",
            "defaultValue": "latest"
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "allowedValues": [
                "Standard_A2",
                "Standard_A3",
                "Standard_B2s",
                "Standard_B2ms",
                "Standard_A2_v2",
                "Standard_A4_v2"
            ],
            "metadata": {
                "description": "Size of the virtual machine. Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general"
            }
        },
        "allowedIPAddresses": {
            "type": "string",
            "metadata": {
                "description": "The sourceAddressPrefixes allowed to connect to this deployment"
            },
            "defaultValue": "*"
        },
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/hunters-forge/Blacksmith/master/",
            "metadata": {
                "description": "The location of resources, such as templates and DSC modules, that the template depends on"
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Auto-generated token to access _artifactsLocation. Leave it blank unless you need to provide your own value."
            }
        },
        "enableMonitoringAgent": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Do you want to enable the Microsoft Log Analytics Monitoring agent? "
            }
        },
        "workspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Log analytics workspace ID"
            }
        },
        "workspaceKey": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Log analytics workspace keys"
            }
        },
        "enableSysmon": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Do you want to install Sysmon on the endpoint?"
            }
        },
        "enableAntimalware": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable Antimalware extension to filter out some folders and file extensions from the Windows Defender service"
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Virtual Network"
            },
            "defaultValue": "vnet-win"
        },
        "virtualNetworkAddressRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the virtual network"
            },
            "defaultValue": "192.168.0.0/16"
        },
        "subnetRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the subnet"
            },
            "defaultValue": "192.168.2.0/24"
        },
        "subnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the subnet"
            },
            "defaultValue": "snet-win"
        },
        "peeringVNET": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Do you want to peer your vnet to a remote vnet?"
            }
        },
        "peeringVNETName": {
            "type": "string",
            "metadata": {
                "description": "Vnet name of the remote vnet you are peering with"
            },
            "defaultValue": ""
        },
        "peeringVNETId": {
            "type": "string",
            "metadata": {
                "description": "Vnet ID of the remote vnet you are peering with"
            },
            "defaultValue": ""
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        }
    },
    "variables": {
        "storageAccountName": "[concat(uniquestring(resourceGroup().id, parameters('utcValue')))]",
        "virtualNetworkName": "[parameters('virtualNetworkName')]",
        "subnetName": "[parameters('subnetName')]",
        "virtualNetworkAddressRange": "[parameters('virtualNetworkAddressRange')]",
        "subnetRange": "[parameters('subnetRange')]",
        "vmPrivateIPPrefixArray": "[take(split(variables('subnetRange'),'.'),3)]",
        "vmPrivateIPAddresPrefix": "[format('{0}.{1}.{2}.',variables('vmPrivateIPPrefixArray')[0], variables('vmPrivateIPPrefixArray')[1], variables('vmPrivateIPPrefixArray')[2])]",
        "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
        "customScriptExTemplateUri": "[uri(parameters('_artifactsLocation'), concat('templates/azure/Win10/nestedtemplates/customScriptExtension.json', parameters('_artifactsLocationSasToken')))]",
        "prepareBoxScript": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/powershell/misc/Prepare-Box.ps1', parameters('_artifactsLocationSasToken')))]",
        "setSecurityAuditingScript": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/powershell/auditing/Enable-WinAuditCategories.ps1', parameters('_artifactsLocationSasToken')))]",
        "saclModule": "https://raw.githubusercontent.com/hunters-forge/Set-AuditRule/master/Set-AuditRule.ps1",
        "setSACLScript": "[uri(parameters('_artifactsLocation'), 'resources/scripts/powershell/auditing/Set-SACLs.ps1')]",
        "installAgentScript": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/powershell/endpoint-software/Install-Endpoint-Agent.ps1', parameters('_artifactsLocationSasToken')))]",
        "setWallPaperScript": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/powershell/misc/Set-WallPaper.ps1', parameters('_artifactsLocationSasToken')))]",

        "copy": [
            {
                "name": "endpointsDynamic",
                "count": "[parameters('numberOfWorkstations')]",
                "input": {
                    "tag": "workstation",
                    "vmName": "[concat(parameters('vmNamePrefix'),copyIndex('endpointsDynamic',5))]",
                    "os": "windows",
                    "subnetref": "[variables('subnetRef')]",                   
                    "ipAddress": "[concat(variables('vmPrivateIPAddresPrefix'),copyIndex('endpointsDynamic',5))]",
                    "vmSize": "[parameters('vmSize')]",
                    "publisher": "MicrosoftWindowsDesktop",
                    "offer": "Windows-10",
                    "sku": "[parameters('windowsDesktopSKU')]",
                    "version": "[parameters('windowsDesktopVersion')]"
                } 
            }
        ]
    }, 
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2018-11-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "Storage",
            "properties": {
            }
        },
        {
            "comments": "Default Network Security Group for Windows endpoints",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-08-01",
            "name": "nsg-rdpallow",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-3389",
                        "properties": {
                            "priority": 100,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "3389",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "[parameters('allowedIPAddresses')]",
                            "destinationAddressPrefix": "*"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-02-01",
            "name": "[variables('virtualNetworkName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-rdpallow')]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('virtualNetworkAddressRange')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetRange')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-rdpallow')]"
                            }
                        }
                    }
                ]
            },
            "resources": [
                {
                   "condition": "[parameters('peeringVNET')]", 
                   "apiVersion": "2016-06-01",
                   "type": "virtualNetworkPeerings",
                   "name": "[concat(variables('virtualNetworkName'), '-', parameters('peeringVNETName'))]",
                   "location": "[resourceGroup().location]",
                   "dependsOn": [
                       "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
                   ],
                   "comments": "This is the peering from local vnet to remote vnet",
                   "properties": {
                       "allowVirtualNetworkAccess": "true",
                       "allowForwardedTraffic": "false",
                       "allowGatewayTransit": "false",
                       "useRemoteGateways": "false",
                       "remoteVirtualNetwork": {
                           "id": "[parameters('peeringVNETId')]"
                       }
                   }
               }
            ]
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2018-11-01",
            "name": "[concat('pip-', variables('endpointsDynamic')[copyIndex('vmPublicIpCopy')].vmName)]",
            "location": "[parameters('location')]",
            "copy": {
                "name": "vmPublicIpCopy",
                "count": "[length(variables('endpointsDynamic'))]"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[toLower(concat(variables('endpointsDynamic')[copyIndex('vmPublicIpCopy')].vmName, '-', uniquestring(resourceGroup().id, parameters('utcValue'))))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-11-01",
            "name": "[concat('nic-', variables('endpointsDynamic')[copyIndex('vmNetworkInterfaceCopy')].vmName)]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip-', variables('endpointsDynamic')[copyIndex('vmNetworkInterfaceCopy')].vmName))]",
                "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
            ],
            "copy": {
                "name": "vmNetworkInterfaceCopy",
                "count": "[length(variables('endpointsDynamic'))]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[variables('endpointsDynamic')[copyIndex('vmNetworkInterfaceCopy')].ipAddress]",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip-', variables('endpointsDynamic')[copyIndex('vmNetworkInterfaceCopy')].vmName))]"
                            },
                            "subnet": {
                                "id": "[variables('endpointsDynamic')[copyIndex('vmNetworkInterfaceCopy')].subnetref]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2018-10-01",
            "name": "[variables('endpointsDynamic')[copyIndex('vmVMCopy')].vmName]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic-', variables('endpointsDynamic')[copyIndex('vmVMCopy')].vmName))]"
            ],
            "copy": {
                "name": "vmVMCopy",
                "count": "[length(variables('endpointsDynamic'))]"
            },
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('endpointsDynamic')[copyIndex('vmVMCopy')].vmSize]"
                },
                "osProfile": {
                    "computerName": "[variables('endpointsDynamic')[copyIndex('vmVMCopy')].vmName]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('endpointsDynamic')[copyIndex('vmVMCopy')].publisher]",
                        "offer": "[variables('endpointsDynamic')[copyIndex('vmVMCopy')].offer]",
                        "sku": "[variables('endpointsDynamic')[copyIndex('vmVMCopy')].sku]",
                        "version": "[variables('endpointsDynamic')[copyIndex('vmVMCopy')].version]"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    },
                    "dataDisks": []
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('nic-', variables('endpointsDynamic')[copyIndex('vmVMCopy')].vmName))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "name": "[concat(variables('endpointsDynamic')[copyIndex('InitialSetUpWKSCopy')].vmName, '/SetupWinVM')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('endpointsDynamic')[copyIndex('InitialSetUpWKSCopy')].vmName)]"
            ],
            "copy": {
                "name": "InitialSetUpWKSCopy",
                "count": "[length(variables('endpointsDynamic'))]"
            },
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.8",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/hunters-forge/Blacksmith/master/templates/azure/Win10/scripts/Set-Initial-Settings.ps1",
                        "[variables('prepareBoxScript')]",
                        "[variables('setSecurityAuditingScript')]",
                        "[variables('saclModule')]",
                        "[variables('setSACLScript')]",
                        "[variables('setWallPaperScript')]"
                    ],
                    "commandToExecute": "powershell -ExecutionPolicy Unrestricted -File ./Set-Initial-Settings.ps1"
                },
                "protectedSettings": {}
            }
        },
        {
            "condition": "[parameters('enableMonitoringAgent')]",
            "name": "[concat(variables('endpointsDynamic')[copyIndex('vmALAAgentSetUpCopy')].vmName, '/OMSExtension')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('endpointsDynamic')[copyIndex('vmALAAgentSetUpCopy')].vmName)]"
            ],
            "copy": {
                "name": "vmALAAgentSetUpCopy",
                "count": "[length(variables('endpointsDynamic'))]"
            },
            "properties": {
                "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                "type": "MicrosoftMonitoringAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "workspaceId": "[parameters('workspaceId')]"
                },
                "protectedSettings": {
                    "workspaceKey": "[parameters('workspaceKey')]"
                }
            }
        },
        {
            "condition": "[parameters('enableSysmon')]",
            "name": "[concat(variables('endpointsDynamic')[copyIndex('vmSysmonSetUpCopy')].vmName, '-Sysmon')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "dependsOn": [
                "InitialSetUpWKSCopy"
            ],
            "copy": {
                "name": "vmSysmonSetupCopy",
                "count": "[length(variables('endpointsDynamic'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customScriptExTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "extensionName": {
                        "value": "SetupWinVM"
                    },
                    "commandToExecute": {
                        "value": "powershell -ExecutionPolicy Unrestricted -File ./Install-Endpoint-Agent.ps1 -EndpointAgent Sysmon"
                    },
                    "fileUris": {
                        "value": [
                            "[variables('installAgentScript')]"
                        ]
                    },
                    "vmName": {
                        "value": "[variables('endpointsDynamic')[copyIndex('vmSysmonSetupCopy')].vmName]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[parameters('enableAntimalware')]",
            "name": "[concat(variables('endpointsDynamic')[copyIndex('vmAntiMalwareSetupCopy')].vmName, '/AntiMalware')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-12-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('endpointsDynamic')[copyIndex('vmAntiMalwareSetupCopy')].vmName)]"
            ],
            "copy": {
                "name": "vmAntiMalwareSetupCopy",
                "count": "[length(variables('endpointsDynamic'))]"
            },
            "properties": {
                "publisher": "Microsoft.Azure.Security",
                "type": "IaaSAntimalware",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "AntimalwareEnabled": true,
                    "Exclusions": {
                        "Extensions": ".bat;.exe;.dll;.ps1;.sct;.vbs;.hta;.py;.tmp;.csproj",
                        "Paths": "C:\\",
                        "Processes": "powershell.exe;sandcat.exe"
                    },
                    "RealtimeProtectionEnabled": "false",
                    "ScheduledScanSettings": {
                        "isEnabled": "false",
                        "scanType": "Quick",
                        "day": "8",
                        "time": "120"
                    }
                },
                "protectedSettings": null
            }
        }
    ],
    "outputs": {
        "virtualNetworkName": {
            "type": "string",
            "value": "[variables('virtualNetworkName')]"
        },
        "virtualNetworkId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
        },
        "endpoints": {
            "type": "array",
            "value": "[variables('endpointsDynamic')]"
        }
    }
}