{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "utcValue": {
            "type": "string",
            "defaultValue": "[utcNow()]",
            "metadata": {
                "description": "Returns the current (UTC) datetime value in the specified format. If no format is provided, the ISO 8601 (yyyyMMddTHHmmssZ) format is used"
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for the Virtual Machine."
            }
        },
        "ubuntuSKU": {
            "type": "string",
            "defaultValue": "18.04-LTS",
            "allowedValues": [
                "18.04-LTS",
                "19.04"
            ],
            "metadata": {
                "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
            }
        },
        "vmName": {
            "type": "string",
            "defaultValue": "C2001",
            "metadata": {
                "description": "Name of the virtual machine"
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "allowedValues": [
                "Standard_A2",
                "Standard_A3",
                "Standard_B2s",
                "Standard_B2ms",
                "Standard_A2_v2",
                "Standard_A4_v2"
            ],
            "metadata": {
                "description": "Size of the virtual machine. Reference: https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general"
            }
        },
        "authenticationType": {
            "type": "string",
            "defaultValue": "password",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
            }
        },
        "adminPasswordOrKey": {
            "type": "securestring",
            "metadata": {
                "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
            }
        },
        "allowedIPAddresses": {
            "type": "string",
            "metadata": {
                "description": "The sourceAddressPrefixes allowed to connect to this deployment"
            },
            "defaultValue": "*"
        },
        "virtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Virtual Network"
            },
            "defaultValue": "vnet-c2"
        },
        "virtualNetworkAddressRange": {
            "type": "string",
            "metadata": {
                "description": "Virtual Network address range"
            },
            "defaultValue": "10.0.0.0/16"
        },
        "subnetRange": {
            "type": "string",
            "metadata": {
                "description": "subnet range"
            },
            "defaultValue": "10.0.0.0/24"
        },
        "VMPrivateIPAddress": {
            "type": "string",
            "metadata": {
                "description": "Private IP for the C2 VM"
            },
            "defaultValue": "10.0.0.8"
        },
        "subnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the subnet"
            },
            "defaultValue": "snet-c2"
        },
        "c2Framework": {
            "type": "string",
            "allowedValues": [
                "empire",
                "covenant",
                "caldera",
                "shad0w"
            ],
            "metadata": {
                "description": "C2 framework to deploy"
            }
        },
        "enableDemoEnv": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Deploys a Windows VM and the project Azure Sentinel2Go"
            }
        },
        "winAdminPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Password for Windows machine"
            }
        },
        "winVirtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Virtual Network"
            },
            "defaultValue": "vnet-win"
        },
        "winVirtualNetworkAddressRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the virtual network"
            },
            "defaultValue": "192.168.0.0/16"
        },
        "winSubnetRange": {
            "type": "string",
            "metadata": {
                "description": "Address Range of the subnet"
            },
            "defaultValue": "192.168.2.0/24"
        },
        "winVmPrivateIPAddress": {
            "type": "string",
            "metadata": {
                "description": "Private IP address of the VM"
            },
            "defaultValue": "192.168.2.10"
        },
        "winSubnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the subnet"
            },
            "defaultValue": "snet-win"
        },
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/hunters-forge/Blacksmith/master/",
            "metadata": {
                "description": "The location of resources, such as templates and DSC modules, that the template depends on"
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Auto-generated token to access _artifactsLocation. Leave it blank unless you need to provide your own value."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        }
    },
    "variables": {
        "storageAccountName": "[concat(uniquestring(resourceGroup().id, parameters('utcValue')))]",
        "c2SetupScript": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/bash/Install-C2s.sh', parameters('_artifactsLocationSasToken')))]",
        "dockerSetupScript": "[uri(parameters('_artifactsLocation'), concat('resources/scripts/bash/Install-Docker.sh', parameters('_artifactsLocationSasToken')))]",
        "win10Template": "[uri(parameters('_artifactsLocation'), concat('templates/azure/Win10/azuredeploy.json', parameters('_artifactsLocationSasToken')))]",
        "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]",
        "vmName": "[parameters('vmName')]",
        "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                        "keyData": "[parameters('adminPasswordOrKey')]"
                    }
                ]
            }
        }
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2018-11-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "Storage",
            "properties": {
            }
        },
        {
            "condition": "[not(or(equals(parameters('c2Framework'), 'covenant'),equals(parameters('c2Framework'), 'caldera')))]",
            "name": "nsg-empire",
            "comments": "Default Network Security Group for Linux endpoints",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-08-01",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-22",
                        "properties": {
                            "priority": 100,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "22",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "[parameters('allowedIPAddresses')]",
                            "destinationAddressPrefix": "*"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[equals(parameters('c2Framework'), 'covenant')]",
            "name": "nsg-covenant",
            "comments": "Default Network Security Group for Linux endpoints",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-08-01",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-22",
                        "properties": {
                            "priority": 100,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "22",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "[parameters('allowedIPAddresses')]",
                            "destinationAddressPrefix": "*"
                        }
                    },
                    {
                        "name": "default-allow-7443",
                        "properties": {
                            "priority": 101,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "7443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "[parameters('allowedIPAddresses')]",
                            "destinationAddressPrefix": "*"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[equals(parameters('c2Framework'), 'caldera')]",
            "name": "nsg-caldera",
            "comments": "Default Network Security Group for Linux endpoints",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-08-01",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-22",
                        "properties": {
                            "priority": 100,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "22",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "[parameters('allowedIPAddresses')]",
                            "destinationAddressPrefix": "*"
                        }
                    },
                    {
                        "name": "default-allow-8888",
                        "properties": {
                            "priority": 101,
                            "access": "Allow",
                            "direction": "Inbound",
                            "destinationPortRange": "8888",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "[parameters('allowedIPAddresses')]",
                            "destinationAddressPrefix": "*"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-02-01",
            "name": "[parameters('virtualNetworkName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', concat('nsg-', parameters('c2Framework')))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('virtualNetworkAddressRange')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('subnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnetRange')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat('nsg-', parameters('c2Framework')))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2018-11-01",
            "name": "[concat('pip-', variables('vmName'))]",
            "location": "[parameters('location')]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[toLower(concat(variables('vmName'), '-', uniquestring(resourceGroup().id, parameters('utcValue'))))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-11-01",
            "name": "[concat('nic-', variables('vmName'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip-', variables('vmName')))]",
                "[resourceId('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[parameters('VMPrivateIPAddress')]",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses/', concat('pip-', variables('vmName')))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-03-01",
            "name": "[variables('vmName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic-', variables('vmName')))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                    "osDisk": {
                        "createOption": "fromImage"
                    },
                    "imageReference": {
                        "publisher": "Canonical",
                        "offer": "UbuntuServer",
                        "sku": "[parameters('ubuntuSKU')]",
                        "version": "latest"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat('nic-', variables('vmName')))]"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPasswordOrKey')]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2019-03-01",
            "name": "[concat(variables('vmName'), '/C2Setup')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.1",
                "autoUpgradeMinorVersion": true,
                "settings": {},
                "protectedSettings": {
                    "commandToExecute": "[concat('bash Install-C2s.sh -r', ' ', parameters('c2Framework'), ' ', '-i', ' ', parameters('VMPrivateIPAddress'))]",
                    "fileUris": [
                        "[variables('dockerSetupScript')]",
                        "[variables('c2SetupScript')]"
                    ]
                }
            }
        },
        {
            "condition": "[parameters('enableDemoEnv')]",
            "name": "deployAzureSentinel2Go",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri('https://raw.githubusercontent.com/OTRF/','Azure-Sentinel2Go/master/azuredeploy.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceName": {
                        "value": "C2"
                    },
                    "enableDataConnectorsKind": {
                        "value": ["SecurityInsightsSecurityEventCollectionConfiguration"]
                    }, 
                    "setSecurityCollectionTier": {
                        "value": "All"
                    },
                    "enableWinEventProviders": {
                        "value": [
                            "System",
                            "Microsoft-Windows-Sysmon/Operational",
                            "Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational",
                            "Microsoft-Windows-Bits-Client/Operational",
                            "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational",
                            "Directory Service",
                            "Microsoft-Windows-DNS-Client/Operational",
                            "Microsoft-Windows-Windows Firewall With Advanced Security/Firewall",
                            "Windows PowerShell",
                            "Microsoft-Windows-PowerShell/Operational",
                            "Microsoft-Windows-WMI-Activity/Operational"
                        ]
                    }
                }
            }
        },
        {
            "condition": "[parameters('enableDemoEnv')]",
            "name": "deployWin10VM",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "dependsOn": [
                "deployAzureSentinel2Go"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('win10Template')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('winAdminPassword')]"
                    },
                    "vmSize": {
                        "value": "[parameters('vmSize')]"
                    },
                    "allowedIPAddresses": {
                        "value": "[parameters('allowedIPAddresses')]"
                    },
                    "virtualNetworkName": {
                        "value": "[parameters('winVirtualNetworkName')]"
                    },
                    "virtualNetworkAddressRange": {
                        "value": "[parameters('winVirtualNetworkAddressRange')]"
                    },
                    "subnetName": {
                        "value": "[parameters('winSubnetName')]"
                    },
                    "subnetRange": {
                        "value": "[parameters('winSubnetRange')]"
                    },
                    "vmPrivateIPAddress": {
                        "value": "[parameters('winVmPrivateIPAddress')]"
                    },
                    "enableMonitoringAgent": {
                        "value": true
                    },
                    "enableAntimalware": {
                        "value": true
                    },
                    "enableSysmon": {
                        "value": true
                    },
                    "workspaceId": {
                        "value": "[if(parameters('enableDemoEnv'), reference('deployAzureSentinel2Go').outputs.workspaceIdOutput.value, 'Resource not deployed')]"
                    },
                    "workspaceKey": {
                        "value": "[if(parameters('enableDemoEnv'), reference('deployAzureSentinel2Go').outputs.workspaceKeyOutput.value, 'Resource not deployed')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "condition": "[parameters('enableDemoEnv')]",
            "name": "[concat(parameters('virtualNetworkName'), '/peering-to-remote-', parameters('winVirtualNetworkName'))]",
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2019-11-01",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]",
                "deployWin10VM"
            ],
            "location": "[parameters('location')]",
            "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": false,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                    "id": "[if(parameters('enableDemoEnv'), reference('deployWin10VM').outputs.virtualNetworkId.value, 'resource not deployed')]"
                }
            }
        },
        {
            "condition": "[parameters('enableDemoEnv')]",
            "name": "[concat(parameters('winVirtualNetworkName'), '/peering-to-remote-', parameters('VirtualNetworkName'))]",
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2019-11-01",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]",
                "deployWin10VM"
            ],
            "location": "[parameters('location')]",
            "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": false,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                    "id": "[if(parameters('enableDemoEnv'), resourceId('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName')), 'resource not deployed')]"
                }
            }
        }
    ],
    "outputs": {
        "vmName": {
            "type": "string",
            "value": "[variables('vmName')]"
        },
        "vmResourceID": {
            "type": "string",
            "value": "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
        },
        "virtualNetworkName": {
            "type": "string",
            "value": "[parameters('virtualNetworkName')]"
        },
        "virtualNetworkId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
        }
    }
}